#!/usr/bin/env python3

import sys
import os
import subprocess
import traceback
import time
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                            QPushButton, QLabel, QTextEdit, QMessageBox, QInputDialog,
                            QHBoxLayout, QSizePolicy, QLineEdit)
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QSize, QTimer
from PyQt5.QtGui import QFont, QIcon, QPixmap, QPalette, QColor

class ScanWorker(QThread):
    finished = pyqtSignal(str)
    error = pyqtSignal(str)
    progress = pyqtSignal(str)

    def __init__(self, command):
        super().__init__()
        self.command = command
        self.process = None
        self.is_running = False

    def run(self):
        try:
            self.is_running = True
            self.progress.emit("Starting scan...\n")
            
            # Use a safer approach with Popen
            if isinstance(self.command, str):
                cmd_parts = self.command.split()
            else:
                cmd_parts = self.command
                
            # Start the process with unbuffered output
            self.process = subprocess.Popen(
                cmd_parts,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=0,  # Unbuffered output
                universal_newlines=True
            )
            
            # Read output in a non-blocking way
            output = ""
            while self.is_running and self.process.poll() is None:
                # Read a line from stdout
                line = self.process.stdout.readline()
                if line:
                    output += line
                    self.progress.emit(line)
                
                # Read a line from stderr
                err_line = self.process.stderr.readline()
                if err_line:
                    output += f"ERROR: {err_line}"
                    self.progress.emit(f"ERROR: {err_line}")
                
                # No delay to prevent freezing
                QApplication.processEvents()
            
            # Get any remaining output
            remaining_output, remaining_error = self.process.communicate()
            if remaining_output:
                output += remaining_output
                self.progress.emit(remaining_output)
            if remaining_error:
                output += f"ERROR: {remaining_error}"
                self.progress.emit(f"ERROR: {remaining_error}")
            
            # Check return code
            if self.process.returncode == 0:
                self.finished.emit(output)
            else:
                self.error.emit(f"Command failed with return code {self.process.returncode}: {output}")
                
        except Exception as e:
            self.error.emit(f"Unexpected error: {str(e)}\n{traceback.format_exc()}")
        finally:
            self.is_running = False
            if self.process and self.process.poll() is None:
                try:
                    self.process.terminate()
                    self.process.wait(timeout=5)
                except:
                    try:
                        self.process.kill()
                    except:
                        pass

    def stop(self):
        self.is_running = False
        if self.process and self.process.poll() is None:
            try:
                self.process.terminate()
            except:
                pass

class SecurityScanner(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Securonis Security Scanner")
        self.setGeometry(100, 100, 700, 500)  # Daha küçük pencere boyutu
        
        # Initialize worker
        self.current_worker = None
        
        # Apply dark theme
        self.apply_dark_theme()
        
        # Main widget and layout
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)
        
        # Top section with logo and buttons
        top_section = QWidget()
        top_layout = QHBoxLayout(top_section)
        
        # Logo image
        logo_label = QLabel()
        try:
            pixmap = QPixmap("/usr/share/icons/securonis/security.png")
            if not pixmap.isNull():
                pixmap = pixmap.scaled(300, 200, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                logo_label.setPixmap(pixmap)
            else:
                # Try alternative path if the first one fails
                pixmap = QPixmap("security.png")
                if not pixmap.isNull():
                    pixmap = pixmap.scaled(300, 200, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                    logo_label.setPixmap(pixmap)
                else:
                    logo_label.setText("Securonis")
                    logo_label.setFont(QFont("Arial", 16, QFont.Bold))
        except Exception as e:
            logo_label.setText("Securonis")
            logo_label.setFont(QFont("Arial", 16, QFont.Bold))
            print(f"Error loading logo: {str(e)}")
            
        logo_label.setAlignment(Qt.AlignCenter)
        top_layout.addWidget(logo_label)
        
        # Buttons section
        buttons_widget = QWidget()
        buttons_layout = QVBoxLayout(buttons_widget)
        self.create_scan_buttons(buttons_layout)
        top_layout.addWidget(buttons_widget)
        
        main_layout.addWidget(top_section)
        
        # Output area - daha büyük
        self.output_area = QTextEdit()
        self.output_area.setReadOnly(True)
        self.output_area.setMinimumHeight(300)  # Daha büyük log ekranı
        main_layout.addWidget(self.output_area)
        
        # Stop button
        self.stop_button = QPushButton("Stop Scan")
        self.stop_button.clicked.connect(self.stop_scan)
        self.stop_button.setEnabled(False)
        main_layout.addWidget(self.stop_button)

    def apply_dark_theme(self):
        # Set dark palette
        dark_palette = QPalette()
        dark_palette.setColor(QPalette.Window, QColor(53, 53, 53))
        dark_palette.setColor(QPalette.WindowText, Qt.white)
        dark_palette.setColor(QPalette.Base, QColor(25, 25, 25))
        dark_palette.setColor(QPalette.AlternateBase, QColor(53, 53, 53))
        dark_palette.setColor(QPalette.ToolTipBase, Qt.white)
        dark_palette.setColor(QPalette.ToolTipText, Qt.white)
        dark_palette.setColor(QPalette.Text, Qt.white)
        dark_palette.setColor(QPalette.Button, QColor(53, 53, 53))
        dark_palette.setColor(QPalette.ButtonText, Qt.white)
        dark_palette.setColor(QPalette.BrightText, Qt.red)
        dark_palette.setColor(QPalette.Link, QColor(42, 130, 218))
        dark_palette.setColor(QPalette.Highlight, QColor(42, 130, 218))
        dark_palette.setColor(QPalette.HighlightedText, Qt.black)
        
        self.setPalette(dark_palette)
        
        # Set stylesheet for buttons and text areas
        self.setStyleSheet("""
            QPushButton {
                background-color: #8B0000;
                color: white;
                border: none;
                padding: 8px;
                border-radius: 4px;
                font-weight: bold;
                min-width: 150px;
            }
            QPushButton:hover {
                background-color: #A00000;
            }
            QPushButton:pressed {
                background-color: #700000;
            }
            QTextEdit {
                background-color: #252525;
                color: white;
                border: 1px solid #555555;
                border-radius: 4px;
            }
            QLabel {
                color: white;
            }
        """)

    def create_scan_buttons(self, layout):
        buttons = [
            ("Detailed Security Scan", self.detailed_scan),
            ("Quick Security Scan", self.quick_scan),
            ("Offline Security Scan", self.offline_scan),
            ("Malware Scan", self.malware_scan),
            ("Filesystem Integrity Check", self.integrity_check),
            ("Network Scan", self.network_scan),
            ("Vulnerability Scan", self.vulnerability_scan)
        ]
        
        for text, func in buttons:
            btn = QPushButton(text)
            btn.clicked.connect(func)
            layout.addWidget(btn)

    def check_and_install_tool(self, tool_name, install_command):
        """Check if a tool is installed and install it if not"""
        try:
            # Use which command to check if tool exists
            result = subprocess.run(["which", tool_name], capture_output=True, text=True)
            if result.returncode == 0:
                return True
                
            self.output_area.append(f"Tool {tool_name} not found. Installing...\n")
            QApplication.processEvents()  # Update UI immediately
            
            # Split the install command into a list
            if isinstance(install_command, str):
                cmd_parts = install_command.split()
            else:
                cmd_parts = install_command
                
            # Run the install command with real-time output
            process = subprocess.Popen(
                cmd_parts,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=0,  # Unbuffered output
                universal_newlines=True
            )
            
            # Read output in real-time
            while True:
                line = process.stdout.readline()
                if line:
                    self.output_area.append(line)
                    QApplication.processEvents()
                
                err_line = process.stderr.readline()
                if err_line:
                    self.output_area.append(f"ERROR: {err_line}")
                    QApplication.processEvents()
                
                if process.poll() is not None:
                    break
            
            # Get any remaining output
            remaining_output, remaining_error = process.communicate()
            if remaining_output:
                self.output_area.append(remaining_output)
                QApplication.processEvents()
            if remaining_error:
                self.output_area.append(f"ERROR: {remaining_error}")
                QApplication.processEvents()
            
            if process.returncode == 0:
                self.output_area.append(f"Tool {tool_name} installed successfully.\n")
                QApplication.processEvents()
                return True
            else:
                self.output_area.append(f"Error installing {tool_name}: {remaining_error}\n")
                QApplication.processEvents()
                return False
                
        except Exception as e:
            self.output_area.append(f"Error checking/installing {tool_name}: {str(e)}\n")
            QApplication.processEvents()
            return False

    def run_scan(self, command, description, tool_name=None, install_command=None):
        try:
            # Stop any running scan
            if self.current_worker and self.current_worker.isRunning():
                self.current_worker.stop()
                self.current_worker.wait()
            
            self.output_area.clear()
            self.output_area.append(f"Starting {description}...\n")
            QApplication.processEvents()
            
            # Check if tool is installed and install if needed
            if tool_name and install_command:
                if not self.check_and_install_tool(tool_name, install_command):
                    self.output_area.append(f"Cannot proceed with {description} because {tool_name} is not installed.\n")
                    QApplication.processEvents()
                    return
            
            # Create a worker thread for the scan
            self.current_worker = ScanWorker(command)
            self.current_worker.finished.connect(self.scan_finished)
            self.current_worker.error.connect(self.scan_error)
            self.current_worker.progress.connect(self.update_progress)
            
            # Enable stop button
            self.stop_button.setEnabled(True)
            
            # Start the scan
            self.current_worker.start()
            
        except Exception as e:
            self.output_area.append(f"Error starting scan: {str(e)}\n{traceback.format_exc()}")
            QApplication.processEvents()
            self.stop_button.setEnabled(False)

    def scan_finished(self, result):
        self.output_area.append("Scan completed successfully.\n")
        QApplication.processEvents()
        self.stop_button.setEnabled(False)

    def scan_error(self, error):
        self.output_area.append(f"Error: {error}\n")
        QApplication.processEvents()
        self.stop_button.setEnabled(False)

    def update_progress(self, text):
        self.output_area.append(text)
        QApplication.processEvents()

    def stop_scan(self):
        if self.current_worker and self.current_worker.isRunning():
            self.current_worker.stop()
            self.output_area.append("Scan stopped by user.\n")
            QApplication.processEvents()
            self.stop_button.setEnabled(False)

    def detailed_scan(self):
        try:
            self.run_scan("sudo clamscan -r --bell -i /", "detailed security scan", 
                         "clamscan", "sudo apt install -y clamav")
        except Exception as e:
            self.output_area.append(f"Error in detailed scan: {str(e)}\n{traceback.format_exc()}")
            QApplication.processEvents()

    def quick_scan(self):
        try:
            self.run_scan("sudo clamscan --bell -i /home", "quick security scan", 
                         "clamscan", "sudo apt install -y clamav")
        except Exception as e:
            self.output_area.append(f"Error in quick scan: {str(e)}\n{traceback.format_exc()}")
            QApplication.processEvents()

    def offline_scan(self):
        try:
            self.run_scan("sudo chkrootkit", "offline security scan", 
                         "chkrootkit", "sudo apt install -y chkrootkit")
        except Exception as e:
            self.output_area.append(f"Error in offline scan: {str(e)}\n{traceback.format_exc()}")
            QApplication.processEvents()

    def malware_scan(self):
        try:
            # Önce maldet kurulumunu kontrol et ve gerekirse kur
            if not self.check_and_install_maldet():
                return
                
            # Maldet tanımlamalarını güncelle
            self.output_area.append("Updating Maldet definitions...\n")
            QApplication.processEvents()
            update_process = subprocess.Popen(
                ["sudo", "maldet", "-u"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=0
            )
            
            while True:
                line = update_process.stdout.readline()
                if line:
                    self.output_area.append(line)
                    QApplication.processEvents()
                
                err_line = update_process.stderr.readline()
                if err_line:
                    self.output_area.append(f"ERROR: {err_line}")
                    QApplication.processEvents()
                
                if update_process.poll() is not None:
                    break
            
            # Maldet'i optimize et
            self.output_area.append("\nOptimizing Maldet performance...\n")
            QApplication.processEvents()
            optimize_process = subprocess.Popen(
                ["sudo", "maldet", "-d"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=0
            )
            
            while True:
                line = optimize_process.stdout.readline()
                if line:
                    self.output_area.append(line)
                    QApplication.processEvents()
                
                err_line = optimize_process.stderr.readline()
                if err_line:
                    self.output_area.append(f"ERROR: {err_line}")
                    QApplication.processEvents()
                
                if optimize_process.poll() is not None:
                    break
            
            # Taramayı başlat
            self.output_area.append("\nStarting malware scan...\n")
            QApplication.processEvents()
            self.run_scan("sudo maldet -a /home", "malware scan")
        except Exception as e:
            self.output_area.append(f"Error in malware scan: {str(e)}\n{traceback.format_exc()}")
            QApplication.processEvents()

    def check_and_install_maldet(self):
        """Check if maldet is installed and install it if not"""
        try:
            # Check if maldet is already installed
            result = subprocess.run(["which", "maldet"], capture_output=True, text=True)
            if result.returncode == 0:
                return True
                
            self.output_area.append("Maldet not found. Installing...\n")
            QApplication.processEvents()
            
            # Create temporary directory for installation
            temp_dir = "/tmp/maldet_install"
            os.makedirs(temp_dir, exist_ok=True)
            
            # Download maldet
            download_cmd = ["wget", "https://www.rfxn.com/downloads/maldetect-current.tar.gz", "-O", f"{temp_dir}/maldetect-current.tar.gz"]
            process = subprocess.Popen(
                download_cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=0
            )
            
            # Show download progress
            while True:
                line = process.stdout.readline()
                if line:
                    self.output_area.append(line)
                    QApplication.processEvents()
                
                err_line = process.stderr.readline()
                if err_line:
                    self.output_area.append(f"ERROR: {err_line}")
                    QApplication.processEvents()
                
                if process.poll() is not None:
                    break
            
            if process.returncode != 0:
                self.output_area.append("Failed to download Maldet\n")
                QApplication.processEvents()
                return False
            
            # Extract the archive
            extract_cmd = ["tar", "xzf", f"{temp_dir}/maldetect-current.tar.gz", "-C", temp_dir]
            process = subprocess.Popen(
                extract_cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=0
            )
            
            while True:
                line = process.stdout.readline()
                if line:
                    self.output_area.append(line)
                    QApplication.processEvents()
                
                err_line = process.stderr.readline()
                if err_line:
                    self.output_area.append(f"ERROR: {err_line}")
                    QApplication.processEvents()
                
                if process.poll() is not None:
                    break
            
            # Install maldet
            install_cmd = ["sudo", "bash", f"{temp_dir}/maldetect-*/install.sh"]
            process = subprocess.Popen(
                install_cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=0
            )
            
            while True:
                line = process.stdout.readline()
                if line:
                    self.output_area.append(line)
                    QApplication.processEvents()
                
                err_line = process.stderr.readline()
                if err_line:
                    self.output_area.append(f"ERROR: {err_line}")
                    QApplication.processEvents()
                
                if process.poll() is not None:
                    break
            
            # Clean up
            cleanup_cmd = ["rm", "-rf", temp_dir]
            subprocess.run(cleanup_cmd, capture_output=True)
            
            # Verify installation
            result = subprocess.run(["which", "maldet"], capture_output=True, text=True)
            if result.returncode == 0:
                self.output_area.append("Maldet installed successfully.\n")
                QApplication.processEvents()
                return True
            else:
                self.output_area.append("Failed to install Maldet\n")
                QApplication.processEvents()
                return False
                
        except Exception as e:
            self.output_area.append(f"Error installing Maldet: {str(e)}\n{traceback.format_exc()}")
            QApplication.processEvents()
            return False

    def integrity_check(self):
        try:
            self.run_scan("sudo aide --check", "filesystem integrity check", 
                         "aide", "sudo apt install -y aide")
        except Exception as e:
            self.output_area.append(f"Error in integrity check: {str(e)}\n{traceback.format_exc()}")
            QApplication.processEvents()

    def network_scan(self):
        try:
            # Create custom input dialog
            dialog = QInputDialog(self)
            dialog.setWindowTitle('Network Scan')
            dialog.setLabelText('Enter network range to scan (e.g., 192.168.1.0/24):')
            
            # Set dark theme for input dialog
            dialog.setStyleSheet("""
                QInputDialog {
                    background-color: #252525;
                    color: white;
                }
                QLabel {
                    color: white;
                }
                QLineEdit {
                    background-color: #353535;
                    color: white;
                    border: 1px solid #555555;
                    border-radius: 4px;
                    padding: 5px;
                }
                QPushButton {
                    background-color: #8B0000;
                    color: white;
                    border: none;
                    padding: 8px;
                    border-radius: 4px;
                    font-weight: bold;
                    min-width: 100px;
                }
                QPushButton:hover {
                    background-color: #A00000;
                }
                QPushButton:pressed {
                    background-color: #700000;
                }
            """)
            
            if dialog.exec_() == QInputDialog.Accepted:
                network_range = dialog.textValue()
                if network_range:
                    self.run_scan(f"sudo nmap -sP {network_range}", "network scan", 
                                 "nmap", "sudo apt install -y nmap")
        except Exception as e:
            self.output_area.append(f"Error in network scan: {str(e)}\n{traceback.format_exc()}")
            QApplication.processEvents()

    def vulnerability_scan(self):
        try:
            self.run_scan("sudo lynis audit system", "vulnerability scan", 
                         "lynis", "sudo apt install -y lynis")
        except Exception as e:
            self.output_area.append(f"Error in vulnerability scan: {str(e)}\n{traceback.format_exc()}")
            QApplication.processEvents()

if __name__ == '__main__':
    try:
        app = QApplication(sys.argv)
        window = SecurityScanner()
        window.show()
        sys.exit(app.exec_())
    except Exception as e:
        print(f"Critical error: {str(e)}")
        print(traceback.format_exc()) 
